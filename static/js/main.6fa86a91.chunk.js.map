{"version":3,"sources":["common/hooks.ts","features/auth/authSlice.ts","common/Nav.tsx","features/count/countSlice.ts","features/count/Counter.tsx","features/fixedPages/About.tsx","features/fixedPages/Home.tsx","features/auth/Auth.tsx","features/fixedPages/Users.tsx","app/App.tsx","common/cookie.ts","app/store.ts","reportWebVitals.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","AUTH_SERVICE","process","initialState","pending","authFromToken","createAsyncThunk","token","a","fetch","method","headers","Authorization","resp","ok","errmsg","statusText","json","e","error","message","Error","tokenInfo","revokeCurrentToken","_","thunkAPI","id","getState","auth","_tokenInfo","authSlice","createSlice","name","reducers","extraReducers","builder","addCase","state","undefined","fulfilled","action","payload","username","user","rejected","Nav","to","countSlice","count","increment","actions","countStatus","Counter","currentCount","Count","dispatch","onClick","About","Home","Auth","style","color","AuthForm","useState","setToken","placeholder","type","value","onChange","target","alert","LogoutForm","Users","App","key","cookie","document","split","map","kv","trim","find","k","getCookie","useEffect","path","store","configureStore","reducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6fa86a91.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../app/store';\n\n// Use throughout the app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst AUTH_SERVICE = process.env.REACT_APP_AUTH_SERIVCE_URL;\n\ninterface TokenInfo {\n  created: number;\n  expires: number;\n  id: string;\n  name: string | null;\n  type: string;\n  user: string;\n  cachefor: number;\n}\n\ninterface AuthState {\n  token?: string;\n  username?: string;\n  error?: string;\n  pending?: boolean;\n  _tokenInfo?: TokenInfo;\n}\n\nconst initialState: AuthState = {\n  pending: false,\n};\n\nexport const authFromToken = createAsyncThunk(\n  'auth/authFromToken',\n  async (token: string) => {\n    const resp = await fetch(`${AUTH_SERVICE}/api/V2/token`, {\n      method: 'GET',\n      headers: {\n        Authorization: token || '',\n      },\n    });\n    if (!resp.ok) {\n      let errmsg = resp.statusText;\n      try {\n        const e = (await resp.json()).error;\n        errmsg += `: ${e.message}`;\n      } catch {\n        // no-op\n      }\n      throw new Error(`Failed to validate token: \"${errmsg}\"`);\n    }\n    const tokenInfo = (await resp.json()) as TokenInfo;\n    return { token, tokenInfo };\n  }\n);\n\nexport const revokeCurrentToken = createAsyncThunk<\n  void,\n  void,\n  { state: { auth: AuthState } }\n>('auth/revokeCurrentToken', async (_, thunkAPI) => {\n  const id = thunkAPI.getState().auth._tokenInfo?.id;\n  const token = thunkAPI.getState().auth.token;\n  if (!id || !token) {\n    throw new Error('Failed to revoke token: No token to revoke');\n  }\n  const resp = await fetch(`${AUTH_SERVICE}/tokens/revoke/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: token || '',\n    },\n  });\n  if (!resp.ok) {\n    throw new Error(`Failed to revoke token: ${resp.statusText}`);\n  }\n});\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    builder\n      .addCase(authFromToken.pending, (state) => {\n        state.error = undefined;\n        state.pending = true;\n      })\n      .addCase(authFromToken.fulfilled, (state, action) => {\n        state.token = action.payload.token;\n        state.username = action.payload.tokenInfo.user;\n        state._tokenInfo = action.payload.tokenInfo;\n        state.pending = false;\n      })\n      .addCase(authFromToken.rejected, (state, action) => {\n        state.error = action.error.message;\n        state.username = undefined;\n        state._tokenInfo = undefined;\n        state.pending = false;\n      })\n      .addCase(revokeCurrentToken.pending, () => undefined)\n      .addCase(revokeCurrentToken.fulfilled, () => {\n        return initialState;\n      })\n      .addCase(revokeCurrentToken.rejected, () => undefined),\n});\n\nexport default authSlice.reducer;\n","import { Link } from 'react-router-dom';\n\nexport default function Nav() {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/about\">About</Link>\n        </li>\n        <li>\n          <Link to=\"/count\">Count</Link>\n        </li>\n        <li>\n          <Link to=\"/users\">Users</Link>\n        </li>\n        <li>\n          <Link to=\"/auth\">Auth</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n","import { createSlice } from '@reduxjs/toolkit';\nimport type { RootState } from '../../app/store';\n\n// Define a type for the slice state\ninterface CountState {\n  count: number;\n}\n\n// Define the initial state using that type\nconst initialState: CountState = {\n  count: 0,\n};\n\nexport const countSlice = createSlice({\n  name: 'count',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.count += 1;\n    },\n  },\n});\n\nexport default countSlice.reducer;\nexport const { increment } = countSlice.actions;\n// Other code such as selectors can use the imported `RootState` type\nexport const countStatus = (state: RootState) => state.count.count;\n","import { useAppSelector, useAppDispatch } from '../../common/hooks';\nimport { countStatus, increment } from '../count/countSlice';\n\nconst Counter = () => {\n  const currentCount = useAppSelector(countStatus);\n  return <>{currentCount}</>;\n};\n\nexport default function Count() {\n  const dispatch = useAppDispatch();\n  const doIncrement = () => {\n    dispatch(increment());\n  };\n  return (\n    <section>\n      <h2>\n        The count is: <Counter />\n      </h2>\n      <button onClick={() => doIncrement()}>Add</button>\n    </section>\n  );\n}\n","export default function About() {\n  return <h2>About</h2>;\n}\n","export default function Home() {\n  return <h2>Home</h2>;\n}\n","import { useState } from 'react';\nimport { useAppSelector, useAppDispatch } from '../../common/hooks';\nimport { authFromToken, revokeCurrentToken } from './authSlice';\n\nexport default function Auth() {\n  const { username, token, error, pending } = useAppSelector(\n    (state) => state.auth\n  );\n  return (\n    <div>\n      <h2>Auth</h2>\n      <p>\n        {token ? `You are logged in as '${username}'` : `You are not logged in`}\n      </p>\n      {pending ? <p>Please wait...</p> : token ? <LogoutForm /> : <AuthForm />}\n      {error ? <span style={{ color: 'red' }}>{error}</span> : null}\n    </div>\n  );\n}\n\nconst AuthForm = () => {\n  const dispatch = useAppDispatch();\n  const [token, setToken] = useState<string>();\n  const doLogin = () => {\n    if (token) {\n      dispatch(authFromToken(token));\n    } else {\n      alert('Please enter a kbase token');\n    }\n  };\n  return (\n    <div>\n      <input\n        placeholder=\"kbase token\"\n        type=\"text\"\n        value={token ?? ''}\n        onChange={(e) => setToken(e.target.value)}\n      />\n      <button onClick={doLogin}>Login</button>\n    </div>\n  );\n};\n\nconst LogoutForm = () => {\n  const dispatch = useAppDispatch();\n  return (\n    <div>\n      <button onClick={() => dispatch(revokeCurrentToken())}>\n        Logout of KBase\n      </button>\n    </div>\n  );\n};\n","export default function Users() {\n  return <h2>Users</h2>;\n}\n","import './App.css';\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { useAppDispatch } from '../common/hooks';\nimport { useEffect } from 'react';\nimport { authFromToken } from '../features/auth/authSlice';\nimport { getCookie } from '../common/cookie';\n\nimport Nav from '../common/Nav';\nimport Count from '../features/count/Counter';\nimport About from '../features/fixedPages/About';\nimport Home from '../features/fixedPages/Home';\nimport Auth from '../features/auth/Auth';\nimport Users from '../features/fixedPages/Users';\n\nexport default function App() {\n  const dispatch = useAppDispatch();\n\n  // Pull token from cookie. If it exists, use it for auth.\n  const token = getCookie('kbase_session');\n  useEffect(() => {\n    if (token) dispatch(authFromToken(token));\n    // OK to ignore dispatch as dependency here\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [token]);\n\n  return (\n    <Router>\n      <div>\n        <Nav />\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/count\">\n            <Count />\n          </Route>\n          <Route path=\"/users\">\n            <Users />\n          </Route>\n          <Route path=\"/auth\">\n            <Auth />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","export function getCookie(key: string) {\n  const cookie = document.cookie\n    .split(';')\n    .map((kv) => kv.trim().split('='))\n    .find(([k, _v]) => k.trim() === key);\n  if (cookie) {\n    return cookie[1];\n  } else {\n    return undefined;\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport count from '../features/count/countSlice';\nimport auth from '../features/auth/authSlice';\n\nexport const store = configureStore({\n  reducer: { count, auth },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './app/App';\nimport { store } from './app/store';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}